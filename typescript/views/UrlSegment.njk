/// <reference path="../../typings/tsd.d.ts" />
// This is Generated Source.
import UrlSection from "../../UrlSection";
{% for seg in children %}
import {{seg.name}} from "./{{seg.name}}";
{% endfor %}

export default class {{name}} extends UrlSection {
    constructor(prv: UrlSection, id?: string, service?) {
        super("{{urlName}}", id {% if defaultValue %} || "{{defaultValue}}" {% endif %}, prv, service);
    }
    {% for seg in children %}

    /**
     * {{seg.valueDesc}}
     */
    {{seg.methodName}}(id?: string) {
        return new {{seg.name}}(this, id);
    }
    {% endfor %}
    {% for op in operations %}

    /**
        {{op.description}}
        FIXME: Assumes post only accept query and body parameters
        FIXME: All properties of body will be optional
    */
    {{op.method}}({{op.paramsDeclar}}): Promise<{{op.responseType}}> {
        return this.getService().send({method: "{{op.httpMethod}}", url: this.getEndpoint(), query: {{op.queryParamName}}, body: {{op.bodyParamName}} }).then(function (res) {
            return res.{% if op.responseType == 'Response' %}response{% else %}json{% endif %}();
        });
    }
    {% endfor %}
}
{% for def in definitions %}

export interface {{def.name}} {
{% for fld in def.fields %}

    /**
     * {{fld.comment}}
     */
    {{ fld.name }}?: {{fld.type}};
{% endfor %}
}
{% endfor %}